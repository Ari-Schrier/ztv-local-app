import base64
from io import BytesIO
from pathlib import Path
from PIL import Image, ImageDraw, ImageFont
import openai

from daily_chronicle.genai_client import IMAGE_MODEL_ID, client
from daily_chronicle.slide_generation import FONT_PATH, temp_image_files
from daily_chronicle.utils_logging import emoji

def crop_center(img: Image.Image) -> Image.Image:
    """Crops the image to a square based on the shortest side."""
    width, height = img.size
    min_side = min(width, height)
    left = (width - min_side) / 2
    top = (height - min_side) / 2
    right = (width + min_side) / 2
    bottom = (height + min_side) / 2
    return img.crop((left, top, right, bottom))


def generate_image_gemini(prompt):
    result = client.models.generate_images(
        model=IMAGE_MODEL_ID,
        prompt=prompt,
        config={
            "number_of_images": 1,
            "output_mime_type": "image/jpeg",
            "aspect_ratio": "1:1",
        }
    )
    if not result.generated_images:
        raise ValueError("No images generated by Gemini.")
    return result.generated_images[0].image.image_bytes


def generate_image_openai(prompt):
    response = openai.images.generate(
        model="gpt-image-1",
        prompt=prompt,
        n=1,
        size="1024x1024",
        quality="auto",
    )
    image_b64 = response.data[0].b64_json
    image_bytes = base64.b64decode(image_b64)
    return image_bytes


def generate_event_image(event, index, generate_image_function, logger=print):
    prompt = event["image_prompt"]
    logger(f"üñºÔ∏è Generating image: \"{prompt}\"")

    # Generate image using the specified function
    try:
        image_bytes = generate_image_function(prompt)
        image = Image.open(BytesIO(image_bytes))

        image_out_path = Path("daily_chronicle") / "temp" / "temp_image_files" / f"event_image_{index + 1}.jpg"
        image_out_path.parent.mkdir(parents=True, exist_ok=True)
        image.save(image_out_path, format="JPEG")
        temp_image_files.append(str(image_out_path))

        logger(f"‚úÖ Image saved: {str(image_out_path)}")
        return str(image_out_path)

    except Exception as e:
        logger(f"{emoji('cross_mark')} Image generation failed: {e}")

        # Add placeholder image path to maintain index alignment
        placeholder_path = Path("resources") / "image_fail_placeholder.jpg"
        if not placeholder_path.exists():
            placeholder_path.parent.mkdir(parents=True, exist_ok=True)

            # Create a white image
            img = Image.new("RGB", (1080, 1080), color=(255, 255, 255))
            draw = ImageDraw.Draw(img)

            # Use a larger, centered font
            font_size = 80
            font_path = FONT_PATH  # Path to the font file
            font = ImageFont.truetype(font_path, font_size)

            message = "No image generated"
            bbox = draw.textbbox((0, 0), message, font=font)
            text_width = bbox[2] - bbox[0]
            text_height = bbox[3] - bbox[1]
            position = ((1080 - text_width) // 2, (1080 - text_height) // 2)

            draw.text(position, message, fill=(100, 100, 100), font=font)

            img.save(placeholder_path)

        return placeholder_path